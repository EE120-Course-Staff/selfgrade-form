import os
import json

possible_scores = tuple(map(str, (0, 2, 5, 8, 10))) + (0, 2, 5, 8, 10)
generic_error_message = " Did you upload the file generated by the selfgrade form, without modifications? If so, post on Ed and course staff can help debug this error."
tol = 1e-6

def write_result(score, output):
    with open('/autograder/results/results.json', 'w') as f:
        f.write('{"score": %0.4f, "output": "%s"}' % (score, output))

def grade():
    with open('./assignment.json', 'r') as file:
        assignment_info = json.load(file)

    files = os.listdir('/autograder/submission')
    if len(files) != 1:
        write_result(0, "You must upload the file generated by the selfgrade form, and that file only.")
        return
        
    with open('/autograder/submission/%s' % files[0], 'r') as f:
        try:
            data = json.load(f)
        except:
            write_result(0, "Could not parse JSON file!" + generic_error_message)
            return
       
        score = 0
        total = 0

        if data["assignment"] != assignment_info["name"]:
            write_result(0, "Uploaded wrong assignment self-grade." + generic_error_message)
            return
        
        if "questions" not in data:
            write_result(0, "JSON file submitted did not include a 'questions' field." + generic_error_message)
            return
        
        assignment_questions = sorted(assignment_info["questions"], key=lambda question: question["name"])

        if len(data["questions"].keys()) != len(assignment_questions):
            write_result(0, f"JSON file submitted did not have same number of questions as assignment." + generic_error_message)
            return

        for key, assignment_question in zip(data["questions"].keys(), assignment_questions):
            qn = data["questions"][key]
            if key != assignment_question["name"]:
                write_result(0, "Malformed question '%s' (question does not exist in assignment)." % key + generic_error_message)
                return
            if float(qn["points"]) != float(assignment_question["points"]):
                write_result(0, "Malformed question '%s' (question points don't match)." % key + generic_error_message)
                return

            if not "grade" in qn or not "points" in qn or not "comments" in qn or qn["grade"] not in possible_scores:
                write_result(0, "Malformed question '%s' (did not include 'grade', 'points', or 'comments' field, or 'grade' is not 0, 2, 5, 8, or 10)." % key + generic_error_message)
                return
            if int(qn["grade"]) in (2, 5, 8) and (qn["comments"] == "" or qn["comments"] == None):
                write_result(0, "Malformed question '%s' (did not include comment with a grade of 2, 5, or 8)." % key + generic_error_message)
                return

            score += int(qn["grade"]) / 10 * float(qn["points"])
            total += float(qn["points"])

        write_result(score, "Your raw score (before scaling) is %0.4f/%d." % (score, total))

if __name__ == '__main__':
    grade()
